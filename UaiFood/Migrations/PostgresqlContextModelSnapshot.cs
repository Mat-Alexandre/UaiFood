// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using UaiFood.Data;

#nullable disable

namespace UaiFood.Migrations
{
    [DbContext(typeof(PostgresqlContext))]
    partial class PostgresqlContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("UaiFood.Models.AvaiableStores", b =>
                {
                    b.Property<string>("StoreId")
                        .HasColumnType("text")
                        .HasColumnOrder(1);

                    b.Property<DateTime>("Availability")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnOrder(2);

                    b.HasKey("StoreId", "Availability");

                    b.ToTable("AvaiableStores");
                });

            modelBuilder.Entity("UaiFood.Models.Bookmarked", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text")
                        .HasColumnOrder(1);

                    b.Property<string>("StoreId")
                        .HasColumnType("text")
                        .HasColumnOrder(2);

                    b.HasKey("UserId", "StoreId");

                    b.ToTable("Bookmarks");
                });

            modelBuilder.Entity("UaiFood.Models.Client", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text")
                        .HasColumnName("ClientId");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("HashedPassword")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<string>("Salt")
                        .HasColumnType("text");

                    b.HasKey("UserId");

                    b.ToTable("Clients");
                });

            modelBuilder.Entity("UaiFood.Models.Order", b =>
                {
                    b.Property<int>("StoreId")
                        .HasColumnType("integer")
                        .HasColumnOrder(1);

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnOrder(2);

                    b.Property<int>("ProductId")
                        .HasColumnType("integer")
                        .HasColumnOrder(3);

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("OrderStatus")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("StoreId", "UserId", "ProductId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("UaiFood.Models.Product", b =>
                {
                    b.Property<string>("ProductId")
                        .HasColumnType("text");

                    b.Property<string>("ProductDescription")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("character varying(25)");

                    b.Property<decimal>("ProductPrice")
                        .HasPrecision(6, 2)
                        .HasColumnType("numeric(6,2)");

                    b.HasKey("ProductId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("UaiFood.Models.Store", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text")
                        .HasColumnName("StoreId");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("HashedPassword")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("MinimumRequest")
                        .HasColumnType("integer");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<string>("Salt")
                        .HasColumnType("text");

                    b.Property<string>("StoreName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("UserId");

                    b.ToTable("Stores");
                });

            modelBuilder.Entity("UaiFood.Models.Client", b =>
                {
                    b.OwnsMany("UaiFood.Models.Address", "AddressInfo", b1 =>
                        {
                            b1.Property<string>("ClientUserId")
                                .HasColumnType("text");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("integer");

                            NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b1.Property<int>("Id"));

                            b1.Property<string>("AddressBlock")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("AddressCity")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("AddressComplement")
                                .HasColumnType("text");

                            b1.Property<int>("AddressNumber")
                                .HasColumnType("integer");

                            b1.Property<string>("AddressPostalCode")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("AddressState")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("AddressStreet")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.HasKey("ClientUserId", "Id");

                            b1.ToTable("Clients_AddressInfo");

                            b1.WithOwner()
                                .HasForeignKey("ClientUserId");
                        });

                    b.Navigation("AddressInfo");
                });

            modelBuilder.Entity("UaiFood.Models.Store", b =>
                {
                    b.OwnsOne("UaiFood.Models.Address", "AddressInfo", b1 =>
                        {
                            b1.Property<string>("StoreUserId")
                                .HasColumnType("text");

                            b1.Property<string>("AddressBlock")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("AddressCity")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("AddressComplement")
                                .HasColumnType("text");

                            b1.Property<int>("AddressNumber")
                                .HasColumnType("integer");

                            b1.Property<string>("AddressPostalCode")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("AddressState")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("AddressStreet")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.HasKey("StoreUserId");

                            b1.ToTable("Stores");

                            b1.WithOwner()
                                .HasForeignKey("StoreUserId");
                        });

                    b.Navigation("AddressInfo")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
